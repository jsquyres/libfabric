name: GitHub Action Schedule

# JMS Saving notes on 21 March 2021...
#
# tl;dr: I can't figure out a way to do this with github actions.
#
# Everything works great if you're within a single repo.  We can add a
# commit to the branch and push it to github; no problem.  The problem
# is with forks.  If you make a PR from a fork, the GITHUB_TOKEN you
# is quite limited:
#
# - You have read-only access (can't push to base repo or to fork
#   repo)
# - You have no access to github action secrets of either repo
# - You can use a deployment environment on the base repo, but you
#   can't access the secrets in that deployment environment)
# --> GHA secrets are really designed to work within a single repo.
#
# In short: I can't figure out a way to get a commit added to any
# branch related to the PR.  There's no way to make artifacts
# available, either.  And we'd really only want to generate them upon
# merges, anyway (not every change of a PR).
#
# Also, a schedule/cron-based GHA will only run against the default
# branch (e.g., it won't run against the release branches).  ...but
# that might be ok...?

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
    nroff-elves-scheduled:
        name: The Nroff Elves
        runs-on: ubuntu-latest
        steps:
          - name: Check out the code
            uses: actions/checkout@v2

          - name: Dump GitHub context
            env:
              GITHUB_CONTEXT: ${{ toJSON(github) }}
            run: |
              echo "============================="
              echo "$GITHUB_CONTEXT"
              echo "============================="
              git remote -v
              echo "============================="
              git status
              echo "============================="

          - name: Get the required packages
            run: sudo apt install -y pandoc perl hub

          - name: Build the nroff man pages
            run: |
              orig_hash=`git rev-parse HEAD`

              for file in `ls man/*.md`; do
                perl config/md2nroff.pl --source=$file
              done

              git config --global user.name "OFIWG Bot"
              git config --global user.email "ofiwg@lists.openfabrics.org"

              branch_name=pr/update-nroff-generated-man-pages
              git checkout -b $branch_name
              git commit -as -m 'Updated nroff-generated man pages'

              # Did we commit anything?
              new_hash=`git rev-parse HEAD`
              if test "$orig_hash" = "$new_hash"; then
                  echo "Nothing to commit -- nothing to do!"
                  exit 0
              fi

              # Yes, we committed something.  Push the branch and make
              # a PR.
              git push
              url=`hub pull-request -m 'Update nroff-generated man pages'`

              # Wait for the required "DCO" CI to complete
              i=0
              sleep_time=5
              max_seconds=300
              i_max=`expr $max_seconds / $sleep_time`

              echo "Waiting up to $max_seconds seconds for DCO CI to complete..."
              while test $i -lt $i_max; do
                  date
                  status=`hub ci-status --format "%t %S%n" | egrep '^DCO' | awk '{ print %2 }'`
                  if test "$status" = "success"; then
                      echo "DCO CI is complete!"
                      break
                  fi
                  sleep $sleep_time
                  i=`expr $i + 1`
              done

              status=0
              if test $i -lt $i_max; then
                  # Sadly, there is no "hub" command to merge a PR.
                  # So do it by hand.
                  curl \
                      -XPUT \
                      -H "Authorization: token $GITHUB_TOKEN" \
                      https://api.github.com/repos/ofiwg/libfabric/pulls/$pr_num/merge
              else
                  echo "Sad panda; DCO CI didn't complete -- did not merge $url"
                  status=1
              fi

              # Delete the remote branch
              git push origin --delete $branch_name
              exit $status

            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

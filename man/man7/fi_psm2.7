.TH "fi_psm2" "7" "2018\-02\-13" "Libfabric Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
fi_psm2 \- The PSM2 Fabric Provider
.SH OVERVIEW
.PP
The \f[I]psm2\f[] provider runs over the PSM 2.x interface that is
supported by the Intel Omni\-Path Fabric.
PSM 2.x has all the PSM 1.x features plus a set of new functions with
enhanced capabilities.
Since PSM 1.x and PSM 2.x are not ABI compatible the \f[I]psm2\f[]
provider only works with PSM 2.x and doesn\[aq]t support Intel TrueScale
Fabric.
.SH LIMITATIONS
.PP
The \f[I]psm2\f[] provider doesn\[aq]t support all the features defined
in the libfabric API.
Here are some of the limitations:
.PP
Endpoint types : Only support non\-connection based types
\f[I]FI_DGRAM\f[] and \f[I]FI_RDM\f[]
.PP
Endpoint capabilities : Endpoints can support any combination of data
transfer capabilities \f[I]FI_TAGGED\f[], \f[I]FI_MSG\f[],
\f[I]FI_ATOMICS\f[], and \f[I]FI_RMA\f[].
These capabilities can be further refined by \f[I]FI_SEND\f[],
\f[I]FI_RECV\f[], \f[I]FI_READ\f[], \f[I]FI_WRITE\f[],
\f[I]FI_REMOTE_READ\f[], and \f[I]FI_REMOTE_WRITE\f[] to limit the
direction of operations.
.PP
\f[I]FI_MULTI_RECV\f[] is supported for non\-tagged message queue only.
.PP
Scalable endpoints are supported if the underlying PSM2 library supports
multiple endpoints.
This condition must be satisfied both when the provider is built and
when the provider is used.
See the \f[I]Scalable endpoints\f[] section for more information.
.PP
Other supported capabilities include \f[I]FI_TRIGGER\f[],
\f[I]FI_REMOTE_CQ_DATA\f[], \f[I]FI_RMA_EVENT\f[], \f[I]FI_SOURCE\f[],
and \f[I]FI_SOURCE_ERR\f[].
Furthermore, \f[I]FI_NAMED_RX_CTX\f[] is supported when scalable
endpoints are enabled.
.PP
Modes : \f[I]FI_CONTEXT\f[] is required for the \f[I]FI_TAGGED\f[] and
\f[I]FI_MSG\f[] capabilities.
That means, any request belonging to these two categories that generates
a completion must pass as the operation context a valid pointer to type
\f[I]struct fi_context\f[], and the space referenced by the pointer must
remain untouched until the request has completed.
If none of \f[I]FI_TAGGED\f[] and \f[I]FI_MSG\f[] is asked for, the
\f[I]FI_CONTEXT\f[] mode is not required.
.PP
Progress : The \f[I]psm2\f[] provider requires manual progress.
The application is expected to call \f[I]fi_cq_read\f[] or
\f[I]fi_cntr_read\f[] function from time to time when no other libfabric
function is called to ensure progress is made in a timely manner.
The provider does support auto progress mode.
However, the performance can be significantly impacted if the
application purely depends on the provider to make auto progress.
.PP
Scalable endpoints : Scalable endpoints support depends on the multi\-EP
feature of the \f[I]PSM2\f[] library.
If the \f[I]PSM2\f[] library has this feature, the availability is
further controlled by an environment variable \f[I]PSM2_MULTI_EP\f[].
The \f[I]psm2\f[] provider automatically sets this variable to 1 if it
is not set.
The feature can be disabled explicitly by setting \f[I]PSM2_MULTI_EP\f[]
to 0.
.PP
When creating a scalable endpoint, the actual number of contexts needed
should be set in the "fi_info" structure passed to the
\f[I]fi_scalable_ep\f[] function.
This number should be set in "fi_info\->ep_attr\->tx_ctx_cnt" or
"fi_info\->ep_attr\->rx_ctx_cnt" or both, whichever greater is used.
The \f[I]psm2\f[] provider allocates all asked contexts upfront when the
scalable endpoint is created.
The same context is used for both Tx and Rx.
.PP
For optimal performance, it is advised to avoid having multiple threads
accessing the same context, either directly by posting
send/recv/read/write request, or indirectly by polling associated
completion queues or counters.
.PP
Unsupported features : These features are unsupported: connection
management, passive endpoint, and shared receive context.
.SH RUNTIME PARAMETERS
.PP
The \f[I]psm2\f[] provider checks for the following environment
variables:
.PP
\f[I]FI_PSM2_UUID\f[] : PSM requires that each job has a unique ID
(UUID).
All the processes in the same job need to use the same UUID in order to
be able to talk to each other.
The PSM reference manual advises to keep UUID unique to each job.
In practice, it generally works fine to reuse UUID as long as (1) no two
jobs with the same UUID are running at the same time; and (2) previous
jobs with the same UUID have exited normally.
If running into "resource busy" or "connection failure" issues with
unknown reason, it is advisable to manually set the UUID to a value
different from the default.
.PP
The default UUID is 00FF00FF\-0000\-0000\-0000\-00FF0F0F00FF.
.PP
\f[I]FI_PSM2_NAME_SERVER\f[] : The \f[I]psm2\f[] provider has a simple
built\-in name server that can be used to resolve an IP address or host
name into a transport address needed by the \f[I]fi_av_insert\f[] call.
The main purpose of this name server is to allow simple client\-server
type applications (such as those in \f[I]fabtests\f[]) to be written
purely with libfabric, without using any out\-of\-band communication
mechanism.
For such applications, the server would run first to allow endpoints be
created and registered with the name server, and then the client would
call \f[I]fi_getinfo\f[] with the \f[I]node\f[] parameter set to the IP
address or host name of the server.
The resulting \f[I]fi_info\f[] structure would have the transport
address of the endpoint created by the server in the \f[I]dest_addr\f[]
field.
Optionally the \f[I]service\f[] parameter can be used in addition to
\f[I]node\f[].
Notice that the \f[I]service\f[] number is interpreted by the provider
and is not a TCP/IP port number.
.PP
The name server is on by default.
It can be turned off by setting the variable to 0.
This may save a small amount of resource since a separate thread is
created when the name server is on.
.PP
The provider detects OpenMPI and MPICH runs and changes the default
setting to off.
.PP
\f[I]FI_PSM2_TAGGED_RMA\f[] : The RMA functions are implemented on top
of the PSM Active Message functions.
The Active Message functions have limit on the size of data can be
transferred in a single message.
Large transfers can be divided into small chunks and be pipe\-lined.
However, the bandwidth is sub\-optimal by doing this way.
.PP
The \f[I]psm2\f[] provider use PSM tag\-matching message queue functions
to achieve higher bandwidth for large size RMA.
It takes advantage of the extra tag bits available in PSM2 to separate
the RMA traffic from the regular tagged message queue.
.PP
The option is on by default.
To turn it off set the variable to 0.
.PP
\f[I]FI_PSM2_DELAY\f[] : Time (seconds) to sleep before closing PSM
endpoints.
This is a workaround for a bug in some versions of PSM library.
.PP
The default setting is 0.
.PP
\f[I]FI_PSM2_TIMEOUT\f[] : Timeout (seconds) for gracefully closing PSM
endpoints.
A forced closing will be issued if timeout expires.
.PP
The default setting is 5.
.PP
\f[I]FI_PSM2_PROG_INTERVAL\f[] : When auto progress is enabled (asked
via the hints to \f[I]fi_getinfo\f[]), a progress thread is created to
make progress calls from time to time.
This option set the interval (microseconds) between progress calls.
.PP
The default setting is 1 if affinity is set, or 1000 if not.
See \f[I]FI_PSM2_PROG_AFFINITY\f[].
.PP
\f[I]FI_PSM2_PROG_AFFINITY\f[] : When set, specify the set of CPU cores
to set the progress thread affinity to.
The format is
\f[C]<start>[:<end>[:<stride>]][,<start>[:<end>[:<stride>]]]*\f[], where
each triplet \f[C]<start>:<end>:<stride>\f[] defines a block of
core_ids.
Both \f[C]<start>\f[] and \f[C]<end>\f[] can be either the
\f[C]core_id\f[] (when >=0) or \f[C]core_id\ \-\ num_cores\f[] (when
<0).
.PP
By default affinity is not set.
.PP
\f[I]FI_PSM2_INJECT_SIZE\f[] : Maximum message size allowed for
fi_inject and fi_tinject calls.
This is an experimental feature to allow some applications to override
default inject size limitation.
When the inject size is larger than the default value, some inject calls
might block.
.PP
The default setting is 64.
.PP
\f[I]FI_PSM2_LOCK_LEVEL\f[] : When set, dictate the level of locking
being used by the provider.
Level 2 means all locks are enabled.
Level 1 disables some locks and is suitable for runs that limit the
access to each PSM2 context to a single thread.
Level 0 disables all locks and thus is only suitable for single threaded
runs.
.PP
To use level 0 or level 1, wait object and auto progress mode cannot be
used because they introduce internal threads that may break the
conditions needed for these levels.
.PP
The default setting is 2.
.PP
\f[I]FI_PSM2_LAZY_CONN\f[] : Control when connections are established
between PSM2 endpoints that OFI endpoints are built on top of.
When set to 0, connections are established when addresses are inserted
into the address vector.
This is the eager connection mode.
When set to 1, connections are established when addresses are used the
first time in communication.
This is the lazy connection mode.
.PP
Lazy connection mode may reduce the start\-up time on large systems at
the expense of higher data path overhead.
.PP
When lazy connection mode is enabled, the address vector type is limited
to \f[I]FI_AV_TABLE\f[].
This is handled differently by \f[I]fi_getinfo\f[] and
\f[I]fi_av_open\f[].
A call to \f[I]fi_getinfo\f[] that asks for \f[I]FI_AV_MAP\f[] would
fail but \f[I]fi_av_open\f[] just forces \f[I]FI_AV_TABLE\f[] silently.
.PP
The default setting is 0.
.PP
\f[I]FI_PSM2_DISCONNECT : The provider has a mechanism to automatically
send disconnection notifications to all connected peers before the local
endpoint is closed. As the response, the peers call
\f[]psm2_ep_disconnect* to clean up the connection state at their side.
This allows the same PSM2 epid be used by different dynamically started
processes (clients) to communicate with the same peer (server).
This mechanism, however, introduce extra overhead to the finalization
phase.
For applications that never reuse epids within the same session such
overhead is unnecessary.
.PP
This option controls whether the automatic disconnection notification
mechanism should be enabled.
For client\-server application mentioned above, the client side should
set this option to 1, but the server should set it to 0.
.PP
The default setting is 0.
.PP
\f[I]FI_PSM2_TAG_LAYOUT : Select how the 96\-bit PSM2 tag bits are
organized. Currently two choices are available: \f[]tag60* means
starting from the most significant bit 32/4/60 bits are used for CQ
data, internal protocol flags, and application tag.
\f[I]tag64\f[] means 4/28/64 division for flags/data/tag.
.PP
The default setting is \f[I]tag60\f[].
.PP
Notice that if the provider is compiled with \f[I]PSMX2_TAG_LAYOUT\f[]
defined to 1(means \f[I]tag60\f[]) or 2(means \f[I]tag64\f[]), the
choice is fixed at compile time and this runtime option is disabled.
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_psm\f[](7),
.SH AUTHORS
OpenFabrics.
